<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!-- Console Log Setting -->
	<appender name="STDOUT"
		class="ch.qos.logback.core.ConsoleAppender"><!-- 콘솔에 출력하기 위한 Appender -->
		<layout class="ch.qos.logback.classic.PatternLayout"><!-- 사용자 마음대로 패턴을 지정하여 출력(%c, %p...) -->
			<encoder>
				<pattern>[%d{yyyy/MM/dd HH:mm:ss}] %highlight(%-5level)| %cyan(%-25.25logger{0}) | %msg%n</pattern>
			</encoder>
		</layout>
	</appender>
	<!-- RollingFileAppender : FileAppender를 보완한 개념으로 
								일정 조건 후에 기존 파일을 백업파일로 바꾸고 다시 새로운 파일에 로그가 쌓이게끔 가능
								그 예로 DailyRollingFileAppender (날짜별로 새로운 로그파일이 생기고 해당 그 문서에 쌓임) -->
	<appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>/logs/debug.log</file><!--/로 시작하면 C드라이브에 폴더가 생김 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>[%-5level] %d{HH:mm:ss.SSS} %logger{36} - %msg%n</pattern>
		</encoder>
		
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"><!-- rollover 발생시 RollingFileAppender의 행동 / Timebased : 시간에 기반-->
			<fileNamePattern>/logs/debug.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"><!-- rollover 활성화시점 -->
				<maxFileSize>50MB</maxFileSize><!-- 각각의 로그파일이 가질 수 있는 최대 크기 -->
			</timeBasedFileNamingAndTriggeringPolicy>
			<maxHistory>15</maxHistory><!-- 아카이브에 저장 유지할 로그파일의 개수 -->
		</rollingPolicy>
	</appender>
	
	<logger name="com.uni.spring" level="DEBUG" /><!-- ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF -->
	
	<root level="INFO"><!-- log level을 INFO까지 명시 -->
		<appender-ref ref="STDOUT" />
		<appender-ref ref="file" />
	</root>
</configuration>